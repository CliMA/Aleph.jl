using Statistics: mean
using SurfaceFluxes
using CloudMicrophysics
const SF = SurfaceFluxes
const CCG = ClimaCore.Geometry
const TC = TurbulenceConvection
const CM = CloudMicrophysics

include("../staggered_nonhydrostatic_model.jl")

baroclinic_wave_mesh(; params, h_elem) =
    cubed_sphere_mesh(; radius = FT(Planet.planet_radius(params)), h_elem)

##
## Initial conditions
##

function init_state(
    center_initial_condition,
    face_initial_condition,
    center_space,
    face_space,
    params,
    models,
)
    ·∂úlocal_geometry = Fields.local_geometry_field(center_space)
    ·∂†local_geometry = Fields.local_geometry_field(face_space)
    c =
        center_initial_condition.(
            ·∂úlocal_geometry,
            params,
            models.energy_form,
            models.moisture_model,
            models.turbconv_model,
        )
    f = face_initial_condition.(·∂†local_geometry, params, models.turbconv_model)
    Y = Fields.FieldVector(; c, f)
    return Y
end

function face_initial_condition(local_geometry, params, turbconv_model)
    z = local_geometry.coordinates.z
    FT = eltype(z)
    tc_kwargs = if turbconv_model isa Nothing
        NamedTuple()
    else
        TC.face_prognostic_vars_edmf(FT, local_geometry, turbconv_model)
    end
    (; w = Geometry.Covariant3Vector(FT(0)), tc_kwargs...)
end

function center_initial_condition_column(
    local_geometry,
    params,
    energy_form,
    moisture_model,
    turbconv_model,
)
    z = local_geometry.coordinates.z
    FT = eltype(z)

    R_d = FT(Planet.R_d(params))
    MSLP = FT(Planet.MSLP(params))
    grav = FT(Planet.grav(params))

    T = FT(300)
    p = MSLP * exp(-z * grav / (R_d * T))
    œÅ = p / (R_d * T)
    ts = TD.PhaseDry_œÅp(params, œÅ, p)

    if energy_form isa PotentialTemperature
        ùîº_kwarg = (; œÅŒ∏ = œÅ * TD.liquid_ice_pottemp(params, ts))
    elseif energy_form isa TotalEnergy
        ùîº_kwarg = (; œÅe_tot = œÅ * (TD.internal_energy(params, ts) + grav * z))
    elseif energy_form isa InternalEnergy
        ùîº_kwarg = (; œÅe_int = œÅ * TD.internal_energy(params, ts))
    end

    tc_kwargs = if turbconv_model isa Nothing
        NamedTuple()
    elseif turbconv_model isa TC.EDMFModel
        (;
            œÅq_tot = FT(0), # TC needs this, for now.
            TC.cent_prognostic_vars_edmf(FT, turbconv_model)...,
        )
    end

    return (;
        œÅ,
        ùîº_kwarg...,
        u‚Çï = Geometry.Covariant12Vector(FT(0), FT(0)),
        tc_kwargs...,
    )
end

function center_initial_condition_baroclinic_wave(
    local_geometry,
    params,
    energy_form,
    moisture_model,
    turbconv_model;
    is_balanced_flow = false,
)

    # Coordinates
    z = local_geometry.coordinates.z
    œï = local_geometry.coordinates.lat
    Œª = local_geometry.coordinates.long
    FT = eltype(z)

    # Constants from CLIMAParameters
    R_d = FT(Planet.R_d(params))
    MSLP = FT(Planet.MSLP(params))
    grav = FT(Planet.grav(params))
    Œ© = FT(Planet.Omega(params))
    R = FT(Planet.planet_radius(params))

    # Constants required for dry initial conditions
    k = 3
    T_e = FT(310) # temperature at the equator
    T_p = FT(240) # temperature at the pole
    T_0 = FT(0.5) * (T_e + T_p)
    Œì = FT(0.005)
    A = 1 / Œì
    B = (T_0 - T_p) / T_0 / T_p
    C = FT(0.5) * (k + 2) * (T_e - T_p) / T_e / T_p
    b = 2
    H = R_d * T_0 / grav
    z_t = FT(15e3)
    Œª_c = FT(20)
    œï_c = FT(40)
    d_0 = R / 6
    V_p = FT(1)

    # Constants required for moist initial conditions
    p_w = FT(3.4e4)
    p_t = FT(1e4)
    q_t = FT(1e-12)
    q_0 = FT(0.018)
    œï_w = FT(40)
    Œµ = FT(0.608)

    # Initial virtual temperature and pressure
    œÑ_z_1 = exp(Œì * z / T_0)
    œÑ_z_2 = 1 - 2 * (z / b / H)^2
    œÑ_z_3 = exp(-(z / b / H)^2)
    œÑ_1 = 1 / T_0 * œÑ_z_1 + B * œÑ_z_2 * œÑ_z_3
    œÑ_2 = C * œÑ_z_2 * œÑ_z_3
    œÑ_int_1 = A * (œÑ_z_1 - 1) + B * z * œÑ_z_3
    œÑ_int_2 = C * z * œÑ_z_3
    I_T = cosd(œï)^k - k * (cosd(œï))^(k + 2) / (k + 2)
    T_v = (œÑ_1 - œÑ_2 * I_T)^(-1)
    p = MSLP * exp(-grav / R_d * (œÑ_int_1 - œÑ_int_2 * I_T))

    # Initial velocity
    U = grav * k / R * œÑ_int_2 * T_v * (cosd(œï)^(k - 1) - cosd(œï)^(k + 1))
    u = -Œ© * R * cosd(œï) + sqrt((Œ© * R * cosd(œï))^2 + R * cosd(œï) * U)
    v = FT(0)
    if !is_balanced_flow
        F_z = (1 - 3 * (z / z_t)^2 + 2 * (z / z_t)^3) * (z ‚â§ z_t)
        r = R * acos(sind(œï_c) * sind(œï) + cosd(œï_c) * cosd(œï) * cosd(Œª - Œª_c))
        c3 = cos(œÄ * r / 2 / d_0)^3
        s1 = sin(œÄ * r / 2 / d_0)
        cond = (0 < r < d_0) * (r != R * pi)
        u +=
            -16 * V_p / 3 / sqrt(FT(3)) *
            F_z *
            c3 *
            s1 *
            (-sind(œï_c) * cosd(œï) + cosd(œï_c) * sind(œï) * cosd(Œª - Œª_c)) /
            sin(r / R) * cond
        v +=
            16 * V_p / 3 / sqrt(FT(3)) *
            F_z *
            c3 *
            s1 *
            cosd(œï_c) *
            sind(Œª - Œª_c) / sin(r / R) * cond
    end
    u‚Çï_local = Geometry.UVVector(u, v)
    u‚Çï = Geometry.Covariant12Vector(u‚Çï_local, local_geometry)

    # Initial moisture and temperature
    if moisture_model isa DryModel
        q_tot = FT(0)
    else
        q_tot =
            (p <= p_t) ? q_t :
            q_0 * exp(-(œï / œï_w)^4) * exp(-((p - MSLP) / p_w)^2)
    end
    T = T_v / (1 + Œµ * q_tot) # This is the formula used in the paper.
    # T = T_v * (1 + q_tot) / (1 + q_tot * Planet.molmass_ratio(params))
    # This is the actual formula, which would be consistent with TD.

    # Initial values computed from the thermodynamic state
    ts = TD.PhaseEquil_pTq(params, p, T, q_tot)
    œÅ = TD.air_density(params, ts)
    if energy_form isa PotentialTemperature
        ·∂úùîº_kwarg = (; œÅŒ∏ = œÅ * TD.liquid_ice_pottemp(params, ts))
    elseif energy_form isa TotalEnergy
        K = norm_sqr(u‚Çï_local) / 2
        ·∂úùîº_kwarg =
            (; œÅe_tot = œÅ * (TD.internal_energy(params, ts) + K + grav * z))
    elseif energy_form isa InternalEnergy
        ·∂úùîº_kwarg = (; œÅe_int = œÅ * TD.internal_energy(params, ts))
    end
    if moisture_model isa DryModel
        moisture_kwargs = NamedTuple()
    elseif moisture_model isa EquilMoistModel
        moisture_kwargs = (; œÅq_tot = œÅ * q_tot)
    elseif moisture_model isa NonEquilMoistModel
        moisture_kwargs = (;
            œÅq_tot = œÅ * q_tot,
            œÅq_liq = œÅ * TD.liquid_specific_humidity(params, ts),
            œÅq_ice = œÅ * TD.ice_specific_humidity(params, ts),
        )
    end
    # TODO: Include ability to handle nonzero initial cloud condensate

    # TODO: synchronize `œÅŒ∏_liq_ice`, `u`, `v`, `u‚Çï`, `œÅ` with TC
    tc_kwargs = if turbconv_model isa Nothing
        NamedTuple()
    elseif turbconv_model isa TC.EDMFModel
        (;
            œÅŒ∏_liq_ice = FT(0),
            œÅq_tot = FT(0),
            u = FT(0),
            v = FT(0),
            TC.cent_prognostic_vars_edmf(FT, turbconv_model)...,
        )
    end
    return (; œÅ, ·∂úùîº_kwarg..., u‚Çï, moisture_kwargs..., tc_kwargs...)
end

function center_initial_condition_sphere(
    local_geometry,
    params,
    energy_form,
    moisture_model,
    turbconv_model;
)

    # Coordinates
    z = local_geometry.coordinates.z
    FT = eltype(z)

    # Constants from CLIMAParameters
    grav = FT(Planet.grav(params))

    # Initial temperature and pressure
    temp_profile = TD.TemperatureProfiles.DecayingTemperatureProfile{FT}(
        params,
        FT(290),
        FT(220),
        FT(8e3),
    )
    T, p = temp_profile(params, z)
    T += rand(FT) * FT(0.1) * (z < 5000)

    # Initial velocity
    u = FT(0)
    v = FT(0)
    u‚Çï_local = Geometry.UVVector(u, v)
    u‚Çï = Geometry.Covariant12Vector(u‚Çï_local, local_geometry)

    # Initial moisture
    q_tot = FT(0)

    # Initial values computed from the thermodynamic state
    œÅ = TD.air_density(params, T, p)
    ts = TD.PhaseEquil_œÅTq(params, œÅ, T, q_tot)
    if energy_form isa PotentialTemperature
        ·∂úùîº_kwarg = (; œÅŒ∏ = œÅ * TD.liquid_ice_pottemp(params, ts))
    elseif energy_form isa TotalEnergy
        K = norm_sqr(u‚Çï_local) / 2
        ·∂úùîº_kwarg =
            (; œÅe_tot = œÅ * (TD.internal_energy(params, ts) + K + grav * z))
    elseif energy_form isa InternalEnergy
        ·∂úùîº_kwarg = (; œÅe_int = œÅ * TD.internal_energy(params, ts))
    end
    if moisture_model isa DryModel
        moisture_kwargs = NamedTuple()
    elseif moisture_model isa EquilMoistModel
        moisture_kwargs = (; œÅq_tot = œÅ * q_tot)
    elseif moisture_model isa NonEquilMoistModel
        moisture_kwargs = (;
            œÅq_tot = œÅ * q_tot,
            œÅq_liq = œÅ * TD.liquid_specific_humidity(params, ts),
            œÅq_ice = œÅ * TD.ice_specific_humidity(params, ts),
        )
    end
    # TODO: Include ability to handle nonzero initial cloud condensate

    # TODO: synchronize `œÅŒ∏_liq_ice`, `u`, `v`, `u‚Çï`, `œÅ` with TC
    tc_kwargs = if turbconv_model isa Nothing
        NamedTuple()
    elseif turbconv_model isa TC.EDMFModel
        (;
            œÅŒ∏_liq_ice = FT(0),
            œÅq_tot = FT(0),
            u = FT(0),
            v = FT(0),
            TC.cent_prognostic_vars_edmf(FT, turbconv_model)...,
        )
    end
    return (; œÅ, ·∂úùîº_kwarg..., u‚Çï, moisture_kwargs..., tc_kwargs...)
end

##
## Additional tendencies
##

# Rayleigh sponge

function rayleigh_sponge_cache(Y, dt; zd_rayleigh = FT(15e3))
    ·∂úz = Fields.coordinate_field(Y.c).z
    ·∂†z = Fields.coordinate_field(Y.f).z
    ·∂úŒ±‚Çò = @. ifelse(·∂úz > zd_rayleigh, 1 / (20 * dt), FT(0))
    ·∂†Œ±‚Çò = @. ifelse(·∂†z > zd_rayleigh, 1 / (20 * dt), FT(0))
    zmax = maximum(·∂†z)
    ·∂úŒ≤_rayleigh =
        @. ·∂úŒ±‚Çò * sin(FT(œÄ) / 2 * (·∂úz - zd_rayleigh) / (zmax - zd_rayleigh))^2
    ·∂†Œ≤_rayleigh =
        @. ·∂†Œ±‚Çò * sin(FT(œÄ) / 2 * (·∂†z - zd_rayleigh) / (zmax - zd_rayleigh))^2
    return (; ·∂úŒ≤_rayleigh, ·∂†Œ≤_rayleigh)
end

function rayleigh_sponge_tendency!(Y‚Çú, Y, p, t)
    (; ·∂úŒ≤_rayleigh, ·∂†Œ≤_rayleigh) = p
    @. Y‚Çú.c.u‚Çï -= ·∂úŒ≤_rayleigh * Y.c.u‚Çï
    @. Y‚Çú.f.w -= ·∂†Œ≤_rayleigh * Y.f.w
end

# Viscous sponge

function viscous_sponge_cache(Y; zd_viscous = FT(15e3), Œ∫‚ÇÇ = FT(1e5))
    ·∂úz = Fields.coordinate_field(Y.c).z
    ·∂†z = Fields.coordinate_field(Y.f).z
    ·∂úŒ±‚Çò = @. ifelse(·∂úz > zd_viscous, Œ∫‚ÇÇ, FT(0))
    ·∂†Œ±‚Çò = @. ifelse(·∂†z > zd_viscous, Œ∫‚ÇÇ, FT(0))
    zmax = maximum(·∂†z)
    ·∂úŒ≤_viscous =
        @. ·∂úŒ±‚Çò * sin(FT(œÄ) / 2 * (·∂úz - zd_viscous) / (zmax - zd_viscous))^2
    ·∂†Œ≤_viscous =
        @. ·∂†Œ±‚Çò * sin(FT(œÄ) / 2 * (·∂†z - zd_viscous) / (zmax - zd_viscous))^2
    return (; ·∂úŒ≤_viscous, ·∂†Œ≤_viscous)
end

function viscous_sponge_tendency!(Y‚Çú, Y, p, t)
    (; ·∂úŒ≤_viscous, ·∂†Œ≤_viscous, ·∂úp) = p
    ·∂úœÅ = Y.c.œÅ
    ·∂úu‚Çï = Y.c.u‚Çï
    if :œÅŒ∏ in propertynames(Y.c)
        @. Y‚Çú.c.œÅŒ∏ += ·∂úŒ≤_viscous * wdiv‚Çï(·∂úœÅ * grad‚Çï(Y.c.œÅŒ∏ / ·∂úœÅ))
    elseif :œÅe_tot in propertynames(Y.c)
        @. Y‚Çú.c.œÅe_tot += ·∂úŒ≤_viscous * wdiv‚Çï(·∂úœÅ * grad‚Çï((Y.c.œÅe_tot + ·∂úp) / ·∂úœÅ))
    elseif :œÅe_int in propertynames(Y.c)
        @. Y‚Çú.c.œÅe_int += ·∂úŒ≤_viscous * wdiv‚Çï(·∂úœÅ * grad‚Çï((Y.c.œÅe_int + ·∂úp) / ·∂úœÅ))
    end
    @. Y‚Çú.c.u‚Çï +=
        ·∂úŒ≤_viscous * (
            wgrad‚Çï(div‚Çï(·∂úu‚Çï)) - Geometry.Covariant12Vector(
                wcurl‚Çï(Geometry.Covariant3Vector(curl‚Çï(·∂úu‚Çï))),
            )
        )
    @. Y‚Çú.f.w.components.data.:1 +=
        ·∂†Œ≤_viscous * wdiv‚Çï(grad‚Çï(Y.f.w.components.data.:1))
end

forcing_cache(Y, ::Nothing) = NamedTuple()

# Held-Suarez forcing

forcing_cache(Y, ::HeldSuarezForcing) = (;
    ·∂úœÉ = similar(Y.c, FT),
    ·∂úheight_factor = similar(Y.c, FT),
    ·∂úŒîœÅT = similar(Y.c, FT),
    ·∂úœÜ = deg2rad.(Fields.coordinate_field(Y.c).lat),
)

function held_suarez_tendency!(Y‚Çú, Y, p, t)
    (; ·∂úp, ·∂úœÉ, ·∂úheight_factor, ·∂úŒîœÅT, ·∂úœÜ, params) = p # assume ·∂úp has been updated

    R_d = FT(Planet.R_d(params))
    Œ∫_d = FT(Planet.kappa_d(params))
    cv_d = FT(Planet.cv_d(params))
    day = FT(Planet.day(params))
    MSLP = FT(Planet.MSLP(params))

    œÉ_b = FT(7 / 10)
    k_a = 1 / (40 * day)
    k_s = 1 / (4 * day)
    k_f = 1 / day
    if :œÅq_tot in propertynames(Y.c)
        ŒîT_y = FT(65)
        T_equator = FT(294)
    else
        ŒîT_y = FT(60)
        T_equator = FT(315)
    end
    ŒîŒ∏_z = FT(10)
    T_min = FT(200)

    @. ·∂úœÉ = ·∂úp / MSLP
    @. ·∂úheight_factor = max(0, (·∂úœÉ - œÉ_b) / (1 - œÉ_b))
    @. ·∂úŒîœÅT =
        (k_a + (k_s - k_a) * ·∂úheight_factor * cos(·∂úœÜ)^4) *
        Y.c.œÅ *
        ( # ·∂úT - ·∂úT_equil
            ·∂úp / (Y.c.œÅ * R_d) - max(
                T_min,
                (T_equator - ŒîT_y * sin(·∂úœÜ)^2 - ŒîŒ∏_z * log(·∂úœÉ) * cos(·∂úœÜ)^2) *
                ·∂úœÉ^Œ∫_d,
            )
        )

    @. Y‚Çú.c.u‚Çï -= (k_f * ·∂úheight_factor) * Y.c.u‚Çï
    if :œÅŒ∏ in propertynames(Y.c)
        @. Y‚Çú.c.œÅŒ∏ -= ·∂úŒîœÅT * (MSLP / ·∂úp)^Œ∫_d
    elseif :œÅe_tot in propertynames(Y.c)
        @. Y‚Çú.c.œÅe_tot -= ·∂úŒîœÅT * cv_d
    elseif :œÅe_int in propertynames(Y.c)
        @. Y‚Çú.c.œÅe_int -= ·∂úŒîœÅT * cv_d
    end
end

# 0-Moment Microphysics

microphysics_cache(Y, ::Nothing) = NamedTuple()
microphysics_cache(Y, ::Microphysics0Moment) = (
    ·∂úS_œÅq_tot = similar(Y.c, FT),
    ·∂úŒª = similar(Y.c, FT),
    col_integrated_precip = similar(ClimaCore.Fields.level(Y.c.œÅ, 1), FT),
)

vertical‚à´_col(field::ClimaCore.Fields.CenterExtrudedFiniteDifferenceField) =
    vertical‚à´_col(field, 1)
vertical‚à´_col(field::ClimaCore.Fields.FaceExtrudedFiniteDifferenceField) =
    vertical‚à´_col(field, ClimaCore.Operators.PlusHalf(1))

function vertical‚à´_col(
    field::ClimaCore.Fields.Field,
    one_index::Union{Int, ClimaCore.Operators.PlusHalf},
)
    Œîz = Fields.local_geometry_field(field).‚àÇx‚àÇŒæ.components.data.:9
    Ni, Nj, _, _, Nh = size(ClimaCore.Spaces.local_geometry_data(axes(field)))
    planar_field = similar(Fields.level(field, one_index))
    for inds in Iterators.product(1:Ni, 1:Nj, 1:Nh)
        Œîz_col = column(Œîz, inds...)
        field_col = column(field, inds...)
        parent(planar_field) .= sum(parent(field_col .* Œîz_col))
    end
    return planar_field
end

function zero_moment_microphysics_tendency!(Y‚Çú, Y, p, t)
    (; ·∂úts, ·∂úŒ¶, ·∂úS_œÅq_tot, ·∂úŒª, col_integrated_precip, params) = p # assume ·∂úts has been updated

    @. ·∂úS_œÅq_tot =
        Y.c.œÅ * CM.Microphysics0M.remove_precipitation(
            params,
            TD.PhasePartition(params, ·∂úts),
        )
    @. Y‚Çú.c.œÅq_tot += ·∂úS_œÅq_tot
    @. Y‚Çú.c.œÅ += ·∂úS_œÅq_tot

    @. ·∂úŒª = TD.liquid_fraction(params, ·∂úts)

    if :œÅe_tot in propertynames(Y.c)
        @. Y‚Çú.c.œÅe_tot +=
            ·∂úS_œÅq_tot * (
                ·∂úŒª * TD.internal_energy_liquid(params, ·∂úts) +
                (1 - ·∂úŒª) * TD.internal_energy_ice(params, ·∂úts) +
                ·∂úŒ¶
            )
    elseif :œÅe_int in propertynames(Y.c)
        @. Y‚Çú.c.œÅe_int +=
            ·∂úS_œÅq_tot * (
                ·∂úŒª * TD.internal_energy_liquid(params, ·∂úts) +
                (1 - ·∂úŒª) * TD.internal_energy_ice(params, ·∂úts)
            )
    end

    # update precip in cache for coupler's use
    col_integrated_precip =
        vertical‚à´_col(·∂úS_œÅq_tot) ./ FT(Planet.œÅ_cloud_liq(params))
end

# Vertical diffusion boundary layer parameterization

# Apply on potential temperature and moisture
# 1) turn the liquid_theta into theta version
# 2) have a total energy version (primary goal)

# Note: ·∂†v_a and ·∂†z_a are 3D projections of 2D Fields (the values of u‚Çï and z at
#       the first cell center of every column, respectively).
# TODO: Allow ClimaCore to handle both 2D and 3D Fields in a single broadcast.
#       This currently results in a mismatched spaces error.
function vertical_diffusion_boundary_layer_cache(
    Y;
    Cd = FT(0.0044),
    Ch = FT(0.0044),
    diffuse_momentum = true,
)
    ·∂†z_a = similar(Y.f, FT)
    z_bottom = Spaces.level(Fields.coordinate_field(Y.c).z, 1)
    Fields.field_values(·∂†z_a) .=
        Fields.field_values(z_bottom) .* one.(Fields.field_values(·∂†z_a))
    # TODO: fix VIJFH copyto! to remove the one.(...)

    dif_flux_u‚Çï =
        Geometry.Contravariant3Vector.(zeros(axes(z_bottom))) .‚äó
        Geometry.Covariant12Vector.(
            zeros(axes(z_bottom)),
            zeros(axes(z_bottom)),
        )
    if :œÅq_tot in propertynames(Y.c)
        dif_flux_œÅq_tot = similar(z_bottom, Geometry.WVector{FT})
    else
        dif_flux_œÅq_tot = Ref(Geometry.WVector(FT(0)))
    end

    if (
        :œÅq_liq in propertynames(Y.c) &&
        :œÅq_ice in propertynames(Y.c) &&
        :œÅq_tot in propertynames(Y.c)
    )
        ts_type = TD.PhaseNonEquil{FT}
    elseif :œÅq_tot in propertynames(Y.c)
        ts_type = TD.PhaseEquil{FT}
    else
        ts_type = TD.PhaseDry{FT}
    end
    coef_type = SF.Coefficients{
        FT,
        SF.InteriorValues{FT, Tuple{FT, FT}, ts_type},
        SF.SurfaceValues{FT, Tuple{FT, FT}, TD.PhaseEquil{FT}},
    }

    return (;
        ·∂†v_a = similar(Y.f, eltype(Y.c.u‚Çï)),
        ·∂†z_a,
        ·∂†K_E = similar(Y.f, FT),
        flux_coefficients = similar(z_bottom, coef_type),
        dif_flux_u‚Çï,
        dif_flux_energy = similar(z_bottom, Geometry.WVector{FT}),
        dif_flux_œÅq_tot,
        Cd,
        Ch,
        diffuse_momentum,
    )
end

function eddy_diffusivity_coefficient(norm_v_a, z_a, p)
    C_E = FT(0.0044)
    p_pbl = FT(85000)
    p_strato = FT(10000)
    K_E = C_E * norm_v_a * z_a
    return p > p_pbl ? K_E : K_E * exp(-((p_pbl - p) / p_strato)^2)
end

function constant_T_saturated_surface_coefs(
    T_sfc,
    ts_int,
    u‚Çï_int,
    z_int,
    z_sfc,
    Cd,
    Ch,
    params,
)
    T_int = TD.air_temperature(params, ts_int)
    Rm_int = TD.gas_constant_air(params, ts_int)
    œÅ_sfc =
        TD.air_density(params, ts_int) *
        (T_sfc / T_int)^(TD.cv_m(params, ts_int) / Rm_int)
    q_sfc = TD.q_vap_saturation_generic(params, T_sfc, œÅ_sfc, TD.Liquid())
    ts_sfc = TD.PhaseEquil_œÅTq(params, œÅ_sfc, T_sfc, q_sfc)
    return SF.Coefficients{FT}(;
        state_in = SF.InteriorValues(z_int, (u‚Çï_int.u, u‚Çï_int.v), ts_int),
        state_sfc = SF.SurfaceValues(z_sfc, (FT(0), FT(0)), ts_sfc),
        Cd,
        Ch,
        z0m = FT(0),
        z0b = FT(0),
    )
end

# This is the same as SF.sensible_heat_flux, but without the Œ¶ term.
# TODO: Move this to SurfaceFluxes.jl.
function sensible_heat_flux_œÅe_int(param_set, Ch, sc, scheme)
    cp_d::FT = Planet.cp_d(param_set)
    R_d::FT = Planet.R_d(param_set)
    T_0::FT = Planet.T_0(param_set)
    cp_m = TD.cp_m(param_set, SF.ts_in(sc))
    œÅ_sfc = TD.air_density(param_set, SF.ts_sfc(sc))
    T_in = TD.air_temperature(param_set, SF.ts_in(sc))
    T_sfc = TD.air_temperature(param_set, SF.ts_sfc(sc))
    ŒîT = T_in - T_sfc
    hd_sfc = cp_d * (T_sfc - T_0) + R_d * T_0
    E = SF.evaporation(sc, param_set, Ch)
    return -œÅ_sfc * Ch * SF.windspeed(sc) * (cp_m * ŒîT) - (hd_sfc) * E
end

function get_momentum_fluxes(params, Cd, flux_coefficients, nothing)
    œÅœÑxz, œÅœÑyz = SF.momentum_fluxes(params, Cd, flux_coefficients, nothing)
    return (; œÅœÑxz = œÅœÑxz, œÅœÑyz = œÅœÑyz)
end

function vertical_diffusion_boundary_layer_tendency!(Y‚Çú, Y, p, t)
    ·∂úœÅ = Y.c.œÅ
    (; ·∂úts, ·∂úp, T_sfc, ·∂†v_a, ·∂†z_a, ·∂†K_E) = p # assume ·∂úts and ·∂úp have been updated
    (;
        flux_coefficients,
        dif_flux_u‚Çï,
        dif_flux_energy,
        dif_flux_œÅq_tot,
        Cd,
        Ch,
        diffuse_momentum,
        params,
    ) = p

    ·∂†grad·µ• = Operators.GradientC2F() # apply BCs to ·∂údiv·µ•, which wraps ·∂†grad·µ•

    Fields.field_values(·∂†v_a) .=
        Fields.field_values(Spaces.level(Y.c.u‚Çï, 1)) .*
        one.(Fields.field_values(·∂†z_a)) # TODO: fix VIJFH copyto! to remove this
    @. ·∂†K_E = eddy_diffusivity_coefficient(norm(·∂†v_a), ·∂†z_a, ·∂†interp(·∂úp))

    flux_coefficients .=
        constant_T_saturated_surface_coefs.(
            T_sfc,
            Spaces.level(·∂úts, 1),
            Geometry.UVVector.(Spaces.level(Y.c.u‚Çï, 1)),
            Spaces.level(Fields.coordinate_field(Y.c).z, 1),
            FT(0), # TODO: get actual value of z_sfc
            Cd,
            Ch,
            params,
        )

    if diffuse_momentum
        (; œÅœÑxz, œÅœÑyz) =
            get_momentum_fluxes.(params, Cd, flux_coefficients, nothing)
        u_space = axes(œÅœÑxz) # TODO: delete when "space not the same instance" error is dealt with 
        normal = Geometry.WVector.(ones(u_space)) # TODO: this will need to change for topography
        œÅ_1 = Fields.Field(Fields.field_values(Fields.level(Y.c.œÅ, 1)), u_space) # TODO: delete when "space not the same instance" error is dealt with
        parent(dif_flux_u‚Çï) .=  # TODO: remove parent when "space not the same instance" error is dealt with 
            parent(
                Geometry.Contravariant3Vector.(normal) .‚äó
                Geometry.Covariant12Vector.(
                    Geometry.UVVector.(œÅœÑxz ./ œÅ_1, œÅœÑyz ./ œÅ_1)
                ),
            )
        ·∂údiv·µ• = Operators.DivergenceF2C(
            top = Operators.SetValue(
                Geometry.Contravariant3Vector(FT(0)) ‚äó
                Geometry.Covariant12Vector(FT(0), FT(0)),
            ),
            bottom = Operators.SetValue(.-dif_flux_u‚Çï),
        )
        @. Y‚Çú.c.u‚Çï += ·∂údiv·µ•(·∂†K_E * ·∂†grad·µ•(Y.c.u‚Çï))
    end

    if :œÅe_tot in propertynames(Y.c)
        @. dif_flux_energy = Geometry.WVector(
            SF.sensible_heat_flux(params, Ch, flux_coefficients, nothing) +
            SF.latent_heat_flux(params, Ch, flux_coefficients, nothing),
        )
        ·∂údiv·µ• = Operators.DivergenceF2C(
            top = Operators.SetValue(Geometry.WVector(FT(0))),
            bottom = Operators.SetValue(.-dif_flux_energy),
        )
        @. Y‚Çú.c.œÅe_tot +=
            ·∂údiv·µ•(·∂†K_E * ·∂†interp(·∂úœÅ) * ·∂†grad·µ•((Y.c.œÅe_tot + ·∂úp) / ·∂úœÅ))
    elseif :œÅe_int in propertynames(Y.c)
        @. dif_flux_energy = Geometry.WVector(
            sensible_heat_flux_œÅe_int(params, Ch, flux_coefficients, nothing) + SF.latent_heat_flux(params, Ch, flux_coefficients, nothing),
        )
        ·∂údiv·µ• = Operators.DivergenceF2C(
            top = Operators.SetValue(Geometry.WVector(FT(0))),
            bottom = Operators.SetValue(.-dif_flux_energy),
        )
        @. Y‚Çú.c.œÅe_int +=
            ·∂údiv·µ•(·∂†K_E * ·∂†interp(·∂úœÅ) * ·∂†grad·µ•((Y.c.œÅe_int + ·∂úp) / ·∂úœÅ))
    end

    if :œÅq_tot in propertynames(Y.c)
        @. dif_flux_œÅq_tot =
            Geometry.WVector(SF.evaporation(flux_coefficients, params, Ch))
        ·∂údiv·µ• = Operators.DivergenceF2C(
            top = Operators.SetValue(Geometry.WVector(FT(0))),
            bottom = Operators.SetValue(.-dif_flux_œÅq_tot),
        )
        @. Y‚Çú.c.œÅq_tot += ·∂údiv·µ•(·∂†K_E * ·∂†interp(·∂úœÅ) * ·∂†grad·µ•(Y.c.œÅq_tot / ·∂úœÅ))
        @. Y‚Çú.c.œÅ += ·∂údiv·µ•(·∂†K_E * ·∂†interp(·∂úœÅ) * ·∂†grad·µ•(Y.c.œÅq_tot / ·∂úœÅ))
    end
end
